{
    "docs": [
        {
            "location": "/api/action-creators/", 
            "text": "setLanguages(languages, [defaultActiveLanguage])\n\n\nDispatch this action to set which languages you are supporting in your translations. If \ndefaultActiveLanguage\n is not passed then the first language in the \nlanguages\n array will be used.\n\n\n Arguments: \n\n\n\n\n\n\n\n\nname\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlanguages\n\n\nstring []\n\n\nAn array of languages codes\n\n\n\n\n\n\n[defaultActiveLanguage]\n\n\nstring\n\n\nPass a language code to override the default active language.\n\n\n\n\n\n\n\n\n Usage: \n\n\nconst languages = ['en', 'fr', 'es'];\n\nstore.dispatch(setLanguages(languages));\n\n// if you wanted 'fr' to be default language instead of 'en'\nstore.dispatch(setLanguages(languages, 'fr'));\n\n\n\n\n\n\naddTranslation(data)\n\n\nDispatch this action to add translation data from a json file, or vanilla JS to your redux store. Please see \n section \n to ensure your translation data is in the proper format. \n\n\n\n\nIMPORTANT:\n The order of the translation strings in the array matters! The order \nMUST\n follow the order of the languages array passed to \nsetLanguages\n.\n\n\n\n\n Arguments \n\n\n\n\n\n\n\n\nname\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\njson | object\n\n\nTranslation data in the \nrequired format\n\n\n\n\n\n\n\n\n Usage: \n\n\n// assuming your app has set languages ['en', 'fr']\nconst welcomePageTranslations = {\n  greeting: ['Hi!', 'Bonjour!'],\n  farwell: ['Bye!', 'Au revoir!']\n};\n\nstore.dispatch(addTranslation(welcomePageTranslations));\n\n\n\n\n\n\nsetActiveLanguage(language)\n\n\nRedux action creator\n to change the current language being used.\n\n\n Arguments: \n\n\n\n\n\n\n\n\nname\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlanguage\n\n\nstring\n\n\nThe language code you want to set as active.\n\n\n\n\n\n\n\n\n Usage: \n\n\n// assuming your app has set languages ['en', 'fr']\nstore.dispatch(setActiveLanguage('fr'));", 
            "title": "Action Creators"
        }, 
        {
            "location": "/api/action-creators/#setlanguageslanguages-defaultactivelanguage", 
            "text": "Dispatch this action to set which languages you are supporting in your translations. If  defaultActiveLanguage  is not passed then the first language in the  languages  array will be used.   Arguments:      name  Type  Description      languages  string []  An array of languages codes    [defaultActiveLanguage]  string  Pass a language code to override the default active language.      Usage:   const languages = ['en', 'fr', 'es'];\n\nstore.dispatch(setLanguages(languages));\n\n// if you wanted 'fr' to be default language instead of 'en'\nstore.dispatch(setLanguages(languages, 'fr'));", 
            "title": "setLanguages(languages, [defaultActiveLanguage])"
        }, 
        {
            "location": "/api/action-creators/#addtranslationdata", 
            "text": "Dispatch this action to add translation data from a json file, or vanilla JS to your redux store. Please see   section   to ensure your translation data is in the proper format.    IMPORTANT:  The order of the translation strings in the array matters! The order  MUST  follow the order of the languages array passed to  setLanguages .    Arguments      name  Type  Description      data  json | object  Translation data in the  required format      Usage:   // assuming your app has set languages ['en', 'fr']\nconst welcomePageTranslations = {\n  greeting: ['Hi!', 'Bonjour!'],\n  farwell: ['Bye!', 'Au revoir!']\n};\n\nstore.dispatch(addTranslation(welcomePageTranslations));", 
            "title": "addTranslation(data)"
        }, 
        {
            "location": "/api/action-creators/#setactivelanguagelanguage", 
            "text": "Redux action creator  to change the current language being used.   Arguments:      name  Type  Description      language  string  The language code you want to set as active.      Usage:   // assuming your app has set languages ['en', 'fr']\nstore.dispatch(setActiveLanguage('fr'));", 
            "title": "setActiveLanguage(language)"
        }, 
        {
            "location": "/api/selectors/", 
            "text": "getTranslate(state)\n\n\nA selector that takes the localeReducer slice of your \nstate\n and returns the \ntranslate\n function. This function will have access to any and all translations that were added to your redux store.\n\n\n Arguments: \n\n\n\n\n\n\n\n\nname\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstate\n\n\nany\n\n\nThe localeReducer slice of your state.\n\n\n\n\n\n\n\n\n Returns: \n\n\nReturns the \ntranslate\n function.\n\n\n Usage: \n\n\nconst Greeting = ({ translate }) =\n \nh1\n{ translate('greeting') }\n/h1\n\n\nconst mapStateToProps = state =\n ({ translate: getTranslate(state.locale) });\nexport default connect(mapStateToProps)(Greeting);\n\n\n\n\n\n\ntranslate(key: string | string[], [data])\n\n\nThe \ngetTransalte\n selector will return the \ntranslate\n function, which is used to add localized strings to your connected React components. The translate function will return single, or multiple translations depending on the arguments passed. \n\n\n Arguments: \n\n\n\n\n\n\n\n\nname\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nstring | string []\n\n\nPass a single key or multiple keys from your translation data.\n\n\n\n\n\n\n[data]\n\n\nobject\n\n\nOptional data to be used in your localized strings for \nvariable replacement\n.\n\n\n\n\n\n\n\n\n Returns: \n\n\nIf a single key is passed then a single localized value will be returned in one of the following formats:\n\n\n\n\nif localized string contains HTML\n a \nReactElement\n will be returned.\n\n\nif localized string contains NO HTML\n a \nstring\n will be returned.\n\n\n\n\nIf multiple keys are passed then multiple localized values will be returned in the following format:\n\n\n{\n  'article.title': 'Article Title',\n  'article.author': 'Ted Tedson',\n  'article.desc': 'My awesome article description',\n}\n\n\n\n\n Usage: \n\n\nconst Article = props =\n (\n  \ndiv\n\n    \nh2\n{ props['article.title'] }\n/h2\n\n    \nh3\n{ props['article.author'] }\n/h3\n\n    \np\n{ props['article.desc'] }\n/p\n\n  \n/div\n\n);\n\nconst Page = ({ translate }) =\n (\n  \ndiv\n\n    \nh1\n{ translate('heading') }\n/h1\n\n    \nArticle { ...translate(['article.title', 'article.author', 'article.desc'], { name: 'Ted' }) } /\n\n  \n/div\n\n);\n\nconst mapStateToProps = state =\n ({ translate: getTranslate(state.locale) });\nexport default connect(mapStateToProps)(Page);\n\n\n\n\n\n\ngetActiveLanguage(state)\n\n\nA selector that takes the localeReducer slice of your \nstate\n and returns the currently active language object.\n\n\n Arguments: \n\n\n\n\n\n\n\n\nname\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstate\n\n\nany\n\n\nThe localeReducer slice of your state.\n\n\n\n\n\n\n\n\n Returns: \n\n\nThe active language object \n\n\n{ code: 'en', active: true }\n\n\n\n\n Usage: \n\n\nconst Greeting = ({ currentLanguage }) =\n \nh1\nMy language is: { currentLanguage }\n/h1\n\n\nconst mapStateToProps = state =\n ({ currentLanguage: getActiveLanguage(state.locale).code });\nexport default connect(mapStateToProps)(Greeting);\n\n\n\n\n\n\ngetLanguages(state)\n\n\nA selector that takes the localeReducer slice of your \nstate\n and returns the languages you set.\n\n\n Arguments: \n\n\n\n\n\n\n\n\nname\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstate\n\n\nany\n\n\nThe localeReducer slice of your state.\n\n\n\n\n\n\n\n\n Returns: \n \n\n\nAn array of language codes \n\n\n[{ code: 'en', active: true }, { code: 'fr', active: false }]\n\n\n\n\n Usage: \n\n\nconst LanguageSelector = ({ languages }) =\n (\n  \nul\n\n    { languages.map(language =\n \n      \na onClick={ () =\n setActiveLanguage(language.code) }\n{ language.code }\n/a\n\n    )}\n  \n/ul\n\n);\n\nconst mapStateToProps = state =\n ({ languages: getLanguages(state.locale) });\nexport default connect(mapStateToProps, { setActiveLanguage })(Greeting);\n\n\n\n\n\n\ngetTranslations(state)\n\n\nA selector that takes your redux \nstate\n and returns all the translation data in your redux store.\n\n\n Arguments: \n\n\n\n\n\n\n\n\nname\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstate\n\n\nany\n\n\nThe localeReducer slice of your state.\n\n\n\n\n\n\n\n\n Returns: \n \n\n\nAn object containing all your translation data.", 
            "title": "Selectors"
        }, 
        {
            "location": "/api/selectors/#gettranslatestate", 
            "text": "A selector that takes the localeReducer slice of your  state  and returns the  translate  function. This function will have access to any and all translations that were added to your redux store.   Arguments:      name  Type  Description      state  any  The localeReducer slice of your state.      Returns:   Returns the  translate  function.   Usage:   const Greeting = ({ translate }) =   h1 { translate('greeting') } /h1 \n\nconst mapStateToProps = state =  ({ translate: getTranslate(state.locale) });\nexport default connect(mapStateToProps)(Greeting);", 
            "title": "getTranslate(state)"
        }, 
        {
            "location": "/api/selectors/#translatekey-string-string-data", 
            "text": "The  getTransalte  selector will return the  translate  function, which is used to add localized strings to your connected React components. The translate function will return single, or multiple translations depending on the arguments passed.    Arguments:      name  Type  Description      key  string | string []  Pass a single key or multiple keys from your translation data.    [data]  object  Optional data to be used in your localized strings for  variable replacement .      Returns:   If a single key is passed then a single localized value will be returned in one of the following formats:   if localized string contains HTML  a  ReactElement  will be returned.  if localized string contains NO HTML  a  string  will be returned.   If multiple keys are passed then multiple localized values will be returned in the following format:  {\n  'article.title': 'Article Title',\n  'article.author': 'Ted Tedson',\n  'article.desc': 'My awesome article description',\n}   Usage:   const Article = props =  (\n   div \n     h2 { props['article.title'] } /h2 \n     h3 { props['article.author'] } /h3 \n     p { props['article.desc'] } /p \n   /div \n);\n\nconst Page = ({ translate }) =  (\n   div \n     h1 { translate('heading') } /h1 \n     Article { ...translate(['article.title', 'article.author', 'article.desc'], { name: 'Ted' }) } / \n   /div \n);\n\nconst mapStateToProps = state =  ({ translate: getTranslate(state.locale) });\nexport default connect(mapStateToProps)(Page);", 
            "title": "translate(key: string | string[], [data])"
        }, 
        {
            "location": "/api/selectors/#getactivelanguagestate", 
            "text": "A selector that takes the localeReducer slice of your  state  and returns the currently active language object.   Arguments:      name  Type  Description      state  any  The localeReducer slice of your state.      Returns:   The active language object   { code: 'en', active: true }   Usage:   const Greeting = ({ currentLanguage }) =   h1 My language is: { currentLanguage } /h1 \n\nconst mapStateToProps = state =  ({ currentLanguage: getActiveLanguage(state.locale).code });\nexport default connect(mapStateToProps)(Greeting);", 
            "title": "getActiveLanguage(state)"
        }, 
        {
            "location": "/api/selectors/#getlanguagesstate", 
            "text": "A selector that takes the localeReducer slice of your  state  and returns the languages you set.   Arguments:      name  Type  Description      state  any  The localeReducer slice of your state.      Returns:     An array of language codes   [{ code: 'en', active: true }, { code: 'fr', active: false }]   Usage:   const LanguageSelector = ({ languages }) =  (\n   ul \n    { languages.map(language =  \n       a onClick={ () =  setActiveLanguage(language.code) } { language.code } /a \n    )}\n   /ul \n);\n\nconst mapStateToProps = state =  ({ languages: getLanguages(state.locale) });\nexport default connect(mapStateToProps, { setActiveLanguage })(Greeting);", 
            "title": "getLanguages(state)"
        }, 
        {
            "location": "/api/selectors/#gettranslationsstate", 
            "text": "A selector that takes your redux  state  and returns all the translation data in your redux store.   Arguments:      name  Type  Description      state  any  The localeReducer slice of your state.      Returns:     An object containing all your translation data.", 
            "title": "getTranslations(state)"
        }, 
        {
            "location": "/api/higher-order-component/", 
            "text": "localize(Component, [reducerName])\n\n\n\n\nNOTE:\n if your component is already using \nconnect\n then you should use the \ngetTranslate\n, and \ngetActiveLanguage\n selectors instead of \nlocalize\n.\n\n\n\n\nIf you have a component that just needs access to translations, and nothing else then you can use the \nlocalize\n higher-order function. When you pass your Component to localize it will automatically add \ntranslate\n and \ncurrentLanguage\n to props. \n\n\n Arguments: \n\n\n\n\n\n\n\n\nname\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nComponent\n\n\nReactComponent\n\n\nThe localeReducer slice of your state.\n\n\n\n\n\n\n[reducerName]\n\n\nstring\n\n\nIf you added localeReducer with \ncombineReducers\n then you will need to pass the reducerName to localize.\n\n\n\n\n\n\n\n\n Returns: \n \n\n\nA higher-order React component that adds \ntranslate\n and \ncurrentLanguage\n to props.\n\n\n Usage: \n\n\nconst Greeting = ({ translate, currentLanguage }) =\n (\n  \nspan\n\n    \nh1\nlanguageCode: { currentLanguage }\n/h1\n\n    \nh2\n{ translate('greeting', { name: 'Testy McTest' }) }\n/h2\n\n  \n/span\n\n);\nexport default localize(Greeting, 'locale');", 
            "title": "Higher Order Component"
        }, 
        {
            "location": "/api/higher-order-component/#localizecomponent-reducername", 
            "text": "NOTE:  if your component is already using  connect  then you should use the  getTranslate , and  getActiveLanguage  selectors instead of  localize .   If you have a component that just needs access to translations, and nothing else then you can use the  localize  higher-order function. When you pass your Component to localize it will automatically add  translate  and  currentLanguage  to props.    Arguments:      name  Type  Description      Component  ReactComponent  The localeReducer slice of your state.    [reducerName]  string  If you added localeReducer with  combineReducers  then you will need to pass the reducerName to localize.      Returns:     A higher-order React component that adds  translate  and  currentLanguage  to props.   Usage:   const Greeting = ({ translate, currentLanguage }) =  (\n   span \n     h1 languageCode: { currentLanguage } /h1 \n     h2 { translate('greeting', { name: 'Testy McTest' }) } /h2 \n   /span \n);\nexport default localize(Greeting, 'locale');", 
            "title": "localize(Component, [reducerName])"
        }, 
        {
            "location": "/", 
            "text": "", 
            "title": "FAQ"
        }
    ]
}